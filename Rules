#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/**/*/”.

passthrough '/assets/**/*'

compile '/static/**/*' do
end

route '/static/**/*' do
  # /static/foo.html → /foo.html
  item.identifier.to_s.sub(/\A\/static/, '')
end

# rules to ignore swagger stuff
compile '**/*/swagger/**/*' do
end
compile '**/*/swagger.*' do
end
compile '**/*.yaml' do
  write nil
end

# RSS Feed
compile '/blog/feed.*' do
    filter :erb
end

route '/blog/feed.*' do
    '/blog/feed.xml'
end

compile '/**/*' do
  filter :erb

  if item.identifier.ext == 'md'
    filter :redirect_to, { :redirect_to => @item[:redirect_to] }
    filter :redcarpet, options: {filter_html: true, autolink: true, no_intraemphasis: true, fenced_code_blocks: true, gh_blockcode: true, tables: true}, renderer_options: {with_toc_data: true}
    filter :normalize_links, item[:repo_docs] if item[:repo_docs]
    filter :outdated_content, item[:repo_docs] if item[:repo_docs] && item[:repo_docs][:outdated]
    filter :add_anchors
    filter :bootstrappify
    filter :admonition
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    filter :config_linker if item[:title] == 'Configuration'
    filter :toc, style: item[:toc]
    if item[:kind] == 'article'
      layout '/blog.*'
    else
      # TODO(mr): separate layout selection from Markdown handling
      layout item[:layout] || '/docs.*'
    end
  elsif item.identifier.ext == 'css'
    # don’t filter stylesheets
  elsif item.binary?
    # don’t filter binary items
  elsif item[:layout]
    layout item[:layout]
  else
    layout '/default.*'
  end
end

# Transform /blog/<YYYY>-<MM>-<DD>-<post title> to
# /blog/<YYYY>/<MM>/<DD>/<post title>.
route '/blog/*' do
  if item.identifier.without_exts.end_with?('index')
    item.identifier.to_str
  else
  # y, m, d, slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(item.identifier.without_ext).capture

  # "/blog/#{y}/#{m}/#{d}/#{slug}/index.html"
    item.identifier.without_ext + "/index.html"
  end
end

route '/**/*' do
  if item.identifier.ext == 'css'
    # Write item with identifier /foo.css to /foo.css
    item.identifier.to_str
  elsif item.binary?
    # Write item with identifier /foo.dat to /foo.dat
    item.identifier.to_str
  elsif item.identifier.without_exts.end_with?('index')
    # Write item with identifier /foo/index.html to /foo/index.html
    item.identifier.to_str
  else
    # Write item with identifier /foo.html to /foo/index.html
    item.identifier.without_exts + '/index.html'
  end
end

layout '/**/*', :erb

require 'nanoc-redirector'

postprocess do
  @items.each do |item|
    config = { output_dir: "docs", index_filenames: [ 'index.html' ] }
    NanocRedirector::RedirectFrom.process(item, item.identifier.without_ext, @config)
  end
end
